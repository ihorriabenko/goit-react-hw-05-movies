{"version":3,"file":"static/js/872.501d46e1.chunk.js","mappings":"8QA0BA,EAxBmB,SAAC,GAA0D,IAAzDA,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OACzDC,EAAM,yCAAqCL,GAC3CM,EAAOF,EAAOG,KAAI,qBAAEC,QAAgBC,KAAK,MAE/C,OAAQ,4BACR,gBAAKC,IAAKL,EAAQM,IAAKV,KACpB,wBAAKA,KACL,wCAAgBC,MAChB,sCACA,uBAAIC,KACJ,oCACA,uBAAIG,Q,SCgET,EAlEuB,WAAO,IAAD,EAC3B,GAA0BM,EAAAA,EAAAA,UAAS,CACjCC,KAAM,GACNC,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAcC,EAAd,KAMQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6FAChBR,GAAS,SAAAS,GAAS,yBACbA,GADa,IAEhBZ,SAAS,OAHK,mBAOSa,EAAAA,EAAAA,IAAiBT,GAP1B,gBAONU,EAPM,EAONA,KACRX,GAAS,SAAAS,GAAS,yBACbA,GADa,IAEhBb,MAAK,UAAMe,GACXd,SAAS,OAXG,gDAcdG,GAAS,SAAAS,GAAS,MAAK,CACrBZ,SAAS,EACTC,MAAK,SAhBO,yDAAH,qDAqBfU,MACC,CAACP,IAEJ,IAAMW,GAAO,UAAAP,EAASN,aAAT,eAAgBa,OAAQ,IAI7BhB,EAAyBG,EAAzBH,KAAMC,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MACjBe,EAASC,OAAOC,KAAKnB,GAAMoB,OAAS,EAE1C,OACE,2BACE,iBAAKC,UAAU,YAAf,UACGpB,IAAW,sCACXC,IAAS,0CACTe,GAAUR,EAASN,QAAS,mBAAQmB,QAV5B,kBAAMf,EAASS,IAUK,qBAC5BC,IAAU,SAAC,GAAD,UAAgBjB,IAC1BiB,IACC,SAAC,KAAD,CAAMd,MAAO,CAAEa,KAAAA,GAAQO,GAAI,OAA3B,kBAIDN,IACC,SAAC,KAAD,CAAMd,MAAO,CAAEa,KAAAA,GAAQO,GAAI,UAA3B,sBAIF,SAAC,KAAD,W,gMCrEFC,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAQ,mCAAG,sGACCN,EAASO,IAAI,oBADd,uBACdhB,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRD,EAAgB,mCAAG,WAAMT,GAAN,uFACPmB,EAASO,IAAT,iBAAuB1B,IADhB,cACxB2B,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBC,EAAmB,mCAAG,WAAMC,GAAN,uFACVV,EAASO,IAAT,0DAAgEG,IADtD,cAC3BF,EAD2B,yBAE1BA,GAF0B,2CAAH,sDAKnBG,EAAe,mCAAG,WAAM9B,GAAN,uFACNmB,EAASO,IAAT,iBAAuB1B,EAAvB,aADM,cACvB2B,EADuB,yBAEtBA,GAFsB,2CAAH,sDAKfI,EAAkB,mCAAG,WAAM/B,GAAN,uFACTmB,EAASO,IAAT,iBAAuB1B,EAAvB,aADS,cAC1B2B,EAD0B,yBAEzBA,GAFyB,2CAAH","sources":["modules/MovieDetails/MovieDetails.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx","shared/api/films.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst SinglePost = ({poster_path, title, vote_average, overview, genres}) => {\n  const imgSrc = `https://image.tmdb.org/t/p/w500${poster_path}`;\n  const gnrs = genres.map(({name}) => name).join(', ');\n\n  return (<div>\n  <img src={imgSrc} alt={title}/>\n     <h2>{title}</h2>\n     <p>User Score: {vote_average}</p>\n     <h3>Overview</h3>\n     <p>{overview}</p>\n     <h3>Genres</h3>\n     <p>{gnrs}</p>\n  </div>\n  )\n}\n\nSinglePost.propTypes = {\n  poster_path: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n  overview: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n}\n\nexport default SinglePost;\n","import { useState, useEffect } from 'react';\nimport {\n  useParams,\n  useNavigate,\n  Link,\n  Outlet,\n  useLocation,\n} from 'react-router-dom';\nimport SinglePost from 'modules/MovieDetails';\nimport { fetchFilmsWithId } from 'shared/api/films';\n\nconst SinglePostPage = () => {\n  const [state, setState] = useState({\n    post: {},\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      setState(prevState => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      try {\n        const { data } = await fetchFilmsWithId(id);\n        setState(prevState => ({\n          ...prevState,\n          post: { ...data },\n          loading: false,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          loading: false,\n          error,\n        }));\n      }\n    };\n\n    fetchPost();\n  }, [id]);\n\n  const from = location.state?.from || '/';\n\n  const goBack = () => navigate(from);\n\n  const { post, loading, error } = state;\n  const isPost = Object.keys(post).length > 0;\n\n  return (\n    <main>\n      <div className=\"container\">\n        {loading && <p>...Loading</p>}\n        {error && <p>Post not found</p>}\n        {isPost && location.state && <button onClick={goBack}>Go back</button>}\n        {isPost && <SinglePost {...post} />}\n        {isPost && (\n          <Link state={{ from }} to={'cast'}>\n            Cast\n          </Link>\n        )}\n        {isPost && (\n          <Link state={{ from }} to={'reviews'}>\n            Reviews\n          </Link>\n        )}\n        <Outlet />\n      </div>\n    </main>\n  );\n};\n\nexport default SinglePostPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '196da2d2dd4f95fd9bfe0927ab5d4d33',\n    language: 'en-US'\n   }\n});\n\nexport const getFilms = async () => {\n  const { data } = await instance.get('trending/all/day');\n  return data;\n};\n\nexport const fetchFilmsWithId = async id => {\n  const response = await instance.get(`/movie/${id}`);\n  return response;\n};\n\nexport const fetchFilmsWithQuery = async searchQuery => {\n  const response = await instance.get(`/search/movie?&page=1&include_adult=false&query=${searchQuery}`)\n  return response;\n}\n\nexport const fetchCastWithId = async id => {\n  const response = await instance.get(`/movie/${id}/credits`);\n  return response;\n}\n\nexport const fetchReviewsWithId = async id => {\n  const response = await instance.get(`/movie/${id}/reviews`);\n  return response;\n}\n"],"names":["poster_path","title","vote_average","overview","genres","imgSrc","gnrs","map","name","join","src","alt","useState","post","loading","error","state","setState","id","useParams","navigate","useNavigate","location","useLocation","useEffect","fetchPost","prevState","fetchFilmsWithId","data","from","isPost","Object","keys","length","className","onClick","to","instance","axios","baseURL","params","api_key","language","getFilms","get","response","fetchFilmsWithQuery","searchQuery","fetchCastWithId","fetchReviewsWithId"],"sourceRoot":""}