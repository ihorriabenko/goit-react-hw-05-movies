{"version":3,"file":"static/js/569.30833944.chunk.js","mappings":"8QAIMA,EAAW,WACf,OAA0BC,EAAAA,EAAAA,UAAS,CACjCC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAcC,EAAd,KAMQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6FAChBJ,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,OAHK,mBAOSS,EAAAA,EAAAA,IAAgBL,GAPzB,gBAONM,EAPM,EAONA,KACRP,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,EACTD,MAAOW,EAAKC,UAXA,gDAcdR,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,EACTC,MAAK,UAjBO,yDAAH,qDAsBfM,MACC,CAACH,IAEJ,IAAQL,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAElBW,EAAWb,EAAMc,KAAI,YAA4C,IAAzCT,EAAwC,EAAxCA,GAAIU,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC9CC,EAAM,yCAAqCH,GAE3CI,EAAMJ,EAAeG,EADX,qEAGhB,OACE,2BACE,gBAAKC,IAAKA,EAAKC,IAAKJ,EAAMK,MAAM,SAChC,uBAAIL,KACJ,uCAAeC,OAHRZ,MAQb,OACE,gCACGJ,IAAW,sCACXC,IAAS,0CACTW,MAKPf,EAASwB,aAAe,CACtBtB,MAAO,IAGT,S,gMClEMuB,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAQ,mCAAG,sGACCN,EAASO,IAAI,oBADd,uBACdnB,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRoB,EAAgB,mCAAG,WAAM1B,GAAN,uFACPkB,EAASO,IAAT,iBAAuBzB,IADhB,cACxB2B,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBC,EAAmB,mCAAG,WAAMC,GAAN,uFACVX,EAASO,IAAT,0DAAgEI,IADtD,cAC3BF,EAD2B,yBAE1BA,GAF0B,2CAAH,sDAKnBtB,EAAe,mCAAG,WAAML,GAAN,uFACNkB,EAASO,IAAT,iBAAuBzB,EAAvB,aADM,cACvB2B,EADuB,yBAEtBA,GAFsB,2CAAH,sDAKfG,EAAkB,mCAAG,WAAM9B,GAAN,uFACTkB,EAASO,IAAT,iBAAuBzB,EAAvB,aADS,cAC1B2B,EAD0B,yBAEzBA,GAFyB,2CAAH","sources":["pages/CastPage/CastPage.jsx","shared/api/films.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastWithId } from 'shared/api/films';\n\nconst CastPage = () => {\n  const [state, setState] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setState(prevState => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      try {\n        const { data } = await fetchCastWithId(id);\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          items: data.cast,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          error,\n        }));\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n\n  const { items, loading, error } = state;\n\n  const elements = items.map(({ id, profile_path, name, character }) => {\n    const imgSrc = `https://image.tmdb.org/t/p/w200${profile_path}`;\n    const imgPlug = 'https://ca.slack-edge.com/T02KJ42DHFD-U03L88JEG07-146f590d3ef9-512'\n    const src = profile_path ? imgSrc : imgPlug;\n\n    return (\n      <li key={id}>\n        <img src={src} alt={name} width='200'/>\n        <p>{name}</p>\n        <p>Character: {character}</p>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      {error && <p>page not found</p>}\n      {elements}\n    </>\n  );\n};\n\nCastPage.defaultProps = {\n  items: [],\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '196da2d2dd4f95fd9bfe0927ab5d4d33',\n    language: 'en-US'\n   }\n});\n\nexport const getFilms = async () => {\n  const { data } = await instance.get('trending/all/day');\n  return data;\n};\n\nexport const fetchFilmsWithId = async id => {\n  const response = await instance.get(`/movie/${id}`);\n  return response;\n};\n\nexport const fetchFilmsWithQuery = async searchQuery => {\n  const response = await instance.get(`/search/movie?&page=1&include_adult=false&query=${searchQuery}`)\n  return response;\n}\n\nexport const fetchCastWithId = async id => {\n  const response = await instance.get(`/movie/${id}/credits`);\n  return response;\n}\n\nexport const fetchReviewsWithId = async id => {\n  const response = await instance.get(`/movie/${id}/reviews`);\n  return response;\n}\n"],"names":["CastPage","useState","items","loading","error","state","setState","id","useParams","useEffect","fetchCast","prevState","fetchCastWithId","data","cast","elements","map","profile_path","name","character","imgSrc","src","alt","width","defaultProps","instance","axios","baseURL","params","api_key","language","getFilms","get","fetchFilmsWithId","response","fetchFilmsWithQuery","searchQuery","fetchReviewsWithId"],"sourceRoot":""}