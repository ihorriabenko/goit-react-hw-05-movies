{"version":3,"file":"static/js/252.914607d6.chunk.js","mappings":"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","sources":["modules/PostsSearch/PostsSearchForm/PostsSearchForm.jsx","modules/PostsSearch/PostsSearch.jsx","pages/MoviesPage/MoviesPage.jsx","shared/api/films.js","shared/components/FilmList/FilmList.jsx"],"sourcesContent":["import { useState } from \"react\"\nimport PropTypes from 'prop-types';\n\nconst PostsSearchForm = ({onSubmit}) => {\n  const [state, setState] = useState({\n    search: '',\n  })\n\n  const handleChange = ({target}) => {\n    const {name, value} = target;\n\n    setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }))\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit({...state});\n    setState({search: ''})\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name='search' value={state.search}type='text' onChange={handleChange} placeholder=\"Search posts\"></input>\n      <button>Search</button>\n    </form>\n  )\n}\n\nPostsSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport default PostsSearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PostList from 'shared/components/FilmList';\nimport PostsSearchForm from './PostsSearchForm';\nimport { fetchFilmsWithQuery } from 'shared/api/films';\n\nconst PostsSearch = () => {\n  const [state, setState] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('query');\n\n  useEffect(() => {\n    const fetchFilms = async () => {\n      setState(prevState => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      try {\n        const {data} = await fetchFilmsWithQuery(search);\n        setState(prevState => ({\n          ...prevState,\n          items: data.results,\n          loading: false,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          error,\n        }));\n      }\n    };\n\n    if (search) {\n      fetchFilms();\n    }\n  }, [search, setState]);\n\n  const changeSearch = ({ search }) => setSearchParams({query: search});\n\n  const { items, loading, error } = state;\n\n  return (\n    <>\n      <PostsSearchForm onSubmit={changeSearch} />\n      {loading && <p>...Loading</p>}\n      {error && <p>Posts not found</p>}\n      {items && <PostList items={items} />}\n    </>\n  );\n};\n\nexport default PostsSearch;\n","import PostsSearch from \"modules/PostsSearch\";\n\nconst MoviesPage = () => {\n  return <main><div className=\"container\"><PostsSearch/></div></main>\n}\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '196da2d2dd4f95fd9bfe0927ab5d4d33',\n    language: 'en-US'\n   }\n});\n\nexport const getFilms = async () => {\n  const { data } = await instance.get('trending/all/day');\n  return data;\n};\n\nexport const fetchFilmsWithId = async id => {\n  const response = await instance.get(`/movie/${id}`);\n  return response;\n};\n\nexport const fetchFilmsWithQuery = async searchQuery => {\n  const response = await instance.get(`/search/movie?&page=1&include_adult=false&query=${searchQuery}`)\n  return response;\n}\n\nexport const fetchCastWithId = async id => {\n  const response = await instance.get(`/movie/${id}/credits`);\n  return response;\n}\n\nexport const fetchReviewsWithId = async id => {\n  const response = await instance.get(`/movie/${id}/reviews`);\n  return response;\n}\n","import { Link, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst PostList = ({items}) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, title }) => (\n    <li key={id}>\n      <Link to={`/movies/${id}`} state={{from: location}}>{title}</Link>\n    </li>\n  ));\n\n  return <ul>{elements}</ul>\n}\n\nPostList.defaultProps = {\n  items: [],\n}\n\nPostList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({id: PropTypes.number.isRequired, title: PropTypes.string}))\n}\n\nexport default PostList;\n"],"names":["onSubmit","useState","search","state","setState","e","preventDefault","name","value","type","onChange","target","prevState","placeholder","items","loading","error","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchFilms","fetchFilmsWithQuery","data","results","query","className","instance","axios","baseURL","params","api_key","language","getFilms","fetchFilmsWithId","id","response","searchQuery","fetchCastWithId","fetchReviewsWithId","PostList","location","useLocation","elements","map","title","to","from","defaultProps"],"sourceRoot":""}