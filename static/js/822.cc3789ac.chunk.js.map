{"version":3,"file":"static/js/822.cc3789ac.chunk.js","mappings":"8QAIMA,EAAc,WAClB,OAA0BC,EAAAA,EAAAA,UAAS,CACjCC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAcC,EAAd,KAMQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6FAChBJ,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,OAHK,mBAOSS,EAAAA,EAAAA,IAAmBL,GAP5B,gBAONM,EAPM,EAONA,KACRP,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,EACTD,MAAOW,EAAKC,aAXA,gDAcdR,GAAS,SAAAK,GAAS,yBACbA,GADa,IAEhBR,SAAS,EACTC,MAAK,UAjBO,yDAAH,qDAsBfM,MACC,CAACH,IAEJ,IAAQL,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAElBW,EAAWb,EAAMc,KAAI,YAA6B,IAA1BT,EAAyB,EAAzBA,GAAIU,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAExC,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGX,MAOPY,EAA0B,IAAjBjB,EAAMkB,QAAe,6CAA2BL,EAE/D,OACE,gCACGZ,IAAW,sCACXC,IAAS,0CACTe,MAKPnB,EAAYqB,aAAe,CACzBnB,MAAO,IAGT,S,gMChEMoB,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAQ,mCAAG,sGACCN,EAASO,IAAI,oBADd,uBACdhB,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRiB,EAAgB,mCAAG,WAAMvB,GAAN,uFACPe,EAASO,IAAT,iBAAuBtB,IADhB,cACxBwB,EADwB,yBAEvBA,GAFuB,2CAAH,sDAKhBC,EAAmB,mCAAG,WAAMC,GAAN,uFACVX,EAASO,IAAT,0DAAgEI,IADtD,cAC3BF,EAD2B,yBAE1BA,GAF0B,2CAAH,sDAKnBG,EAAe,mCAAG,WAAM3B,GAAN,uFACNe,EAASO,IAAT,iBAAuBtB,EAAvB,aADM,cACvBwB,EADuB,yBAEtBA,GAFsB,2CAAH,sDAKfnB,EAAkB,mCAAG,WAAML,GAAN,uFACTe,EAASO,IAAT,iBAAuBtB,EAAvB,aADS,cAC1BwB,EAD0B,yBAEzBA,GAFyB,2CAAH","sources":["pages/ReviewsPage/ReviewsPage.jsx","shared/api/films.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviewsWithId } from 'shared/api/films';\n\nconst ReviewsPage = () => {\n  const [state, setState] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setState(prevState => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      try {\n        const { data } = await fetchReviewsWithId(id);\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          items: data.results,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          error,\n        }));\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n\n  const { items, loading, error } = state;\n\n  const elements = items.map(({ id, author, content}) => {\n\n    return (\n      <li key={id}>\n        <h3>Author: {author}</h3>\n        <p>{content}</p>\n      </li>\n    );\n  });\n\n  const elmnts = items.length === 0 ? <p>reviews not found</p> : elements;\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      {error && <p>page not found</p>}\n      {elmnts}\n    </>\n  );\n};\n\nReviewsPage.defaultProps = {\n  items: [],\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '196da2d2dd4f95fd9bfe0927ab5d4d33',\n    language: 'en-US'\n   }\n});\n\nexport const getFilms = async () => {\n  const { data } = await instance.get('trending/all/day');\n  return data;\n};\n\nexport const fetchFilmsWithId = async id => {\n  const response = await instance.get(`/movie/${id}`);\n  return response;\n};\n\nexport const fetchFilmsWithQuery = async searchQuery => {\n  const response = await instance.get(`/search/movie?&page=1&include_adult=false&query=${searchQuery}`)\n  return response;\n}\n\nexport const fetchCastWithId = async id => {\n  const response = await instance.get(`/movie/${id}/credits`);\n  return response;\n}\n\nexport const fetchReviewsWithId = async id => {\n  const response = await instance.get(`/movie/${id}/reviews`);\n  return response;\n}\n"],"names":["ReviewsPage","useState","items","loading","error","state","setState","id","useParams","useEffect","fetchCast","prevState","fetchReviewsWithId","data","results","elements","map","author","content","elmnts","length","defaultProps","instance","axios","baseURL","params","api_key","language","getFilms","get","fetchFilmsWithId","response","fetchFilmsWithQuery","searchQuery","fetchCastWithId"],"sourceRoot":""}